# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-06 14:46
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('aid', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('tags', models.TextField()),
                ('createtime', models.DateTimeField()),
                ('status', models.IntegerField()),
                ('upvote', models.IntegerField()),
                ('downvote', models.IntegerField()),
                ('questionstatus', models.IntegerField()),
                ('isdeleted', models.IntegerField()),
            ],
            options={
                'db_table': 'article',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('codename', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
                ('username', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('cid', models.IntegerField(primary_key=True, serialize=False)),
                ('articleid', models.IntegerField()),
                ('uid', models.IntegerField()),
                ('atuid', models.IntegerField()),
                ('content', models.TextField()),
                ('createtime', models.IntegerField()),
                ('isdeleted', models.IntegerField()),
                ('accepted', models.IntegerField()),
                ('deleted', models.IntegerField()),
            ],
            options={
                'db_table': 'comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
                ('action_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSite',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('domain', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'django_site',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoginHistory',
            fields=[
                ('lid', models.IntegerField(primary_key=True, serialize=False)),
                ('uid', models.IntegerField()),
                ('ip', models.TextField()),
                ('createtime', models.DateTimeField()),
            ],
            options={
                'db_table': 'login_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tid', models.IntegerField()),
                ('tag', models.TextField()),
                ('createtime', models.DateTimeField()),
            ],
            options={
                'db_table': 'tags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tran_id', models.IntegerField()),
                ('uid', models.IntegerField()),
                ('transactionuid', models.IntegerField()),
                ('transaction_plat', models.IntegerField()),
                ('createtime', models.DateTimeField()),
                ('memo', models.TextField()),
                ('transaction_status', models.IntegerField()),
                ('money', models.TextField()),
            ],
            options={
                'db_table': 'transaction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TransactionDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trandetail_id', models.IntegerField()),
                ('uid', models.IntegerField()),
                ('tid', models.IntegerField()),
                ('operation', models.IntegerField()),
                ('createtime', models.DateTimeField()),
            ],
            options={
                'db_table': 'transaction_details',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.IntegerField()),
                ('login_plat_type', models.IntegerField()),
                ('name', models.TextField()),
                ('email', models.TextField(db_column='Email')),
                ('qq', models.IntegerField(db_column='QQ')),
                ('weichat', models.TextField(db_column='WeiChat')),
                ('sina', models.TextField(db_column='Sina')),
                ('alipay', models.TextField()),
                ('createtime', models.DateTimeField()),
                ('logintime', models.DateTimeField()),
                ('status', models.IntegerField()),
                ('guid', models.TextField()),
                ('phone', models.TextField()),
                ('pwd', models.TextField()),
                ('designation', models.TextField()),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
    ]
